#!/usr/bin/perl

use strict;
use warnings;

#use GD::Simple;
#use Time::HiRes qw( usleep sleep );
use Math::Complex;

# define parameters
my $rl = -2;                # lower bound real
my $il = -1.5;              # lower bound imag
my $ru = +1;                # upper bound real
my $iu = +1.5;              # upper bound imag
my $pixelsize = 0.002;      # pixel size
my $maxiter = 255;           # maximum iterations
#my $threshold = 20;         # threshold for belonging to mandelbrot set
my $file = "mandel.bin";    # output file name

# calculate parameters
my $ncols = int(( $ru - $rl ) / $pixelsize);
my $nrows = int(( $iu - $il ) / $pixelsize);

print "# Cols: $ncols\n# Rows: $nrows\n\n";

# create a new image
#my $img = GD::Simple->new($ncols,$nrows);
#$img->penSize(1,1);

# open the output data file
open DATA, ">$file" or die "Can't open output file: $!\n";
binmode DATA;

# Write the header of the output data file
print DATA pack('h4', 'aaaa');      # delimiter
print DATA pack('s', $ncols);
print DATA pack('s', $nrows);
print DATA pack('s', 2);
print DATA pack('h4', 'aaaa');

# initialize some values
my $pixelcnt = 0;       # pixel counter
my $cr = 0;             # real part
my $ci = 0;             # imaginary part
my $iter = 0;           # iterations
my $rgb;                # color (arrayref)

# interation over all cols and rows of image
for (my $col = 0; $col < $ncols; $col++)
{
    # calculate real part of complex number c
    $cr = $rl + (0.5 + $col) * $pixelsize;

    for (my $row = 0; $row < $nrows; $row++)
    {
        # calculate imaginary part of complex number c
        $ci = $il + (0.5 + $row) * $pixelsize;

        # calculate mandelbrot sequence
        $iter = mb_sequence($cr, $ci, $maxiter);
        #$rgb = color($iter, $threshold);

        # draw point
        #$img->moveTo($col,$row);
        #$img->fgcolor(@{$rgb});
        #$img->line(1);

        # output data to file
        print DATA pack('s', $iter);

        $pixelcnt++;

        # progress info
        printf "[%3s%%] Re = %+7.3f, Im = %+7.3f, Iter = %4s \r",
            int(100*$pixelcnt/($ncols*$nrows)), $cr, $ci, $iter;
        #usleep(5000);
    }
}

print "\n";

# output data to png file
#open PNG, ">$file";
#print PNG $img->png;
#close PNG;

# close the output data file
close DATA;

# calculate the mandelbot sequence
sub mb_sequence
{
    # get the complex number the iteration has to be
    # calculated for
    my $cr = shift;
    my $ci = shift;
    my $maxiter = shift;

    # initialize some values
    my $c = cplx($cr, $ci);
    my $z = cplx(0, 0);
    my $iter = 0;

    while (abs($z) <= 2 && $iter < $maxiter)
    {
        $z = $z * $z + $c;
        $iter++;
    }

    return $iter;
}

# return rgb color values as a function of the iterations
#sub color
#{
#    my $iter = shift;
#    my $threshold = shift;
#
#    my @rgb=(255,255,255);
#    @rgb = (0,0,0) if ($iter > $threshold); 
#    #my @rgb = GD::Simple->HSVtoRGB($iter,255,255);
#    return \@rgb;
#}
